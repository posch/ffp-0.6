#!/ffp/bin/sh

sites_file=/ffp/etc/slacker/sites
pkglog=/ffp/funpkg/installed
logfile=/ffp/funpkg/slacker/slacker.log
C=/ffp/funpkg/slacker/cache
new_dirs="/ffp/etc /ffp/start"

cmd_reinstall="/ffp/bin/funpkg -I"
cmd_install="/ffp/bin/funpkg -i"
cmd_upgrade="/ffp/bin/funpkg -u"
cmd_remove="/ffp/bin/funpkg -r"

# functions
die()	{ echo "FATAL: $@" >&2; exit 1; }
warn()	{ echo "WARNING: $@" >&2; }

# process config file

[ -r "$sites_file" ] || die "Missing config file: $sites_file"

mkdir -p $C
egrep '^[a-z]' $sites_file >$C/sites
while read name url options; do
	sites="$sites $name"
	eval url_$name=\'$url\'
	eval options_$name=\'$options\'
done <$C/sites

# cache functions

fetch() # [-f] cache-path
{
	if [ "$1" = "-f" ]; then
		shift
	elif [ -r "$C/$1" ]; then
		echo "fetch: found $C/$1"
		return 0
	fi

	site_=$(echo "$1" | cut -d/ -f1)
	path_=$(echo "$1" | cut -d/ -f2-)
	dst_=$C/$(dirname $1)
	url_=$(eval echo \$url_$site_)

	mkdir -p "$dst_"
	case "$url_" in
		rsync://*)
			cmd_="rsync -q '$url_/$path_' '$dst_'"
			;;
		/*)
			cmd_="cp '$url_/$path_' '$dst_'"
			;;
		*)
			die "cache: don't know how to fetch from $url_"
			;;
	esac
	echo "fetch: $cmd_"
	eval $cmd_
}

# command line
ME=$(basename $0)

usage()
{
	cat <<EOF
$ME options pattern...
Options:
	-U	Update package lists
	-C	Clear cache

	Install, reinstall or upgrade:
	 -a	List all available packages
	 -I	List available packages that are installed and up-to-date
	 -i	List available packages that are not installed
	 -u	List available packages that differ from the installed version

	Remove packages:
	 -r	Remove installed packages
	 -o	List installed packages not present at sites

	-A	Pre-select all packages in the dialog
	-c	Print report to stdout, no menu

EOF
	exit 1
}

do_update=no
flags=
cflag=
on_off=off

[ $# -gt 0 ] || usage
opts=$(getopt hUCIiuaroAc "$@") || exit 1
eval set -- "$opts"
while true; do
	case "$1" in
		-U)
			do_update=yes
			shift
			;;
		-C)
			echo "Cleaning $C ..."
			rm -rvf ${C:-/no/where}/*
			exit 0
			;;
		-I)
			flags="I$flags"
			shift
			;;
		-i)
			flags="i$flags"
			shift
			;;
		-u)
			flags="u$flags"
			shift
			;;
		-a)
			flags="Iiu"
			shift
			;;
		-r)
			flags="or$flags"
			shift
			;;
	        -o)
			flags="o$flags"
			shift
			;;
		-A)
			on_off=on
			shift
			;;
		-c)
			cflag=yes
			shift
			;;
		--)
			shift
			break
			;;
		*)
			usage
			;;
	esac
done

# create a search pattern from the remaining arguments
pattern=
while [ $# -gt 0 ]; do
	s=$(echo "$1" | sed '/\//! s,^.*:,^&.*,')
	shift
	if [ -z "$pattern" ]; then
		pattern="$s"
	else
		pattern="$pattern|$s"
	fi
done
[ -z "$pattern" ] || pattern="($pattern)"
[ -n "$flags" ]   || flags="u"

# update index files

# index files have one line per package, with the following colums
#  PF PN PV-PA-PR file
mkindex_CHECKSUMS_md5() # site /path/to/CHECKSUMS.md5
{
	# index files:
	# name fullname location
	awk -v site=$1 -- '
		NF == 2 && $1 ~ /^[a-fA-F0-9]+$/ && $2 ~ /\.(tgz|tbz|tlz|txz)$/ {
			sub(/^\.\//, "", $2);
			if (match($2, /^(.*\/)?((.+)-([^-]+-[^-]+-[^-]+))\....$/, a) > 0) {
				print a[3], a[2], site ":" $2;
			}
		}' "$2" | sort -k 4
}

if [ "$do_update" = "yes" ]; then

	echo "Updating package lists..."

	>$C/available
	for site in $sites; do
		fetch -f $site/CHECKSUMS.md5
		if [ -r $C/$site/CHECKSUMS.md5 ]; then
			mkindex_CHECKSUMS_md5 $site "$C/$site/CHECKSUMS.md5" >$C/$site.index
			cat $C/$site.index >>$C/available
		else
			warn "$site: No CHECKSUMS.md5"
		fi
	done
fi

[ -r "$C/available" ] || die "Empty cache"

# create index of installed packages
# name fullname
ls $pkglog | \
awk -- 'NF == 1 {
		if (match($1, /^((.+)-([^-]+-[^-]+-[^-]+))$/, a) > 0) {
			print a[2], a[1];
		} else { print "didnt match:", $1; }
	}' >$C/installed

# generate report
# status name installed available location
>$C/report

awk -- 'BEGIN {
		while (getline < ARGV[1]) {
			installed[$1] = $2;
		}

		for (i = 2; i < ARGC; i++) {
			while (getline < ARGV[i]) {
				available[$1] = 1;
				if ($1 in installed) {
					if ($2 == installed[$1]) {
						print "I", $1, installed[$1], $2, $3;
					} else {
						print "u", $1, installed[$1], $2, $3;
					}
				} else {
					print "i", $1, "-", $2, $3;
				}
			}
		}

		for (n in installed) {
			if (n in available) {
				print "r", n, installed[n], "-", installed[n];
			} else {
				print "o", n, installed[n], "-", installed[n];
			}
		}

		exit;
	}' $C/installed $C/available | sort -k5 >$C/report

#na=$(wc -l $C/report | cut -d' ' -f1)
#[ $na -gt 0 ] || die "No packages found"

# handle -c
if [ "$cflag" = "yes" ]; then
	cat $C/report | awk -v flags=$flags -v pattern=$pattern -- 'flags ~ $1 && $5 ~ pattern { print }'
	exit 0
fi

# menu
awk -v flags=$flags -v pattern=$pattern -v on_off=$on_off -- '
	BEGIN {
		cmd["I"] = "reinstall";
		cmd["i"] = "install  ";
		cmd["u"] = "upgrade  ";
		cmd["r"] = "remove   ";
		cmd["o"] = "remove   ";
	}	
	flags ~ $1 && $5 ~ pattern {
		print "\"" cmd[$1] " " $5 "\"", "\"\"", on_off, "\"Installed: " $3 "\"" 
	}' $C/report >$C/menu
if cmp -s $C/menu /dev/null; then
	echo "No packages found (status $flags, pattern $pattern)"
	exit 1
fi
cmd="dialog --separate-output --title 'Package list $pattern' --backtitle 'Slacker' --item-help --checklist '' 0 0 0 $(cat $C/menu) 2>$C/selection"
eval $cmd
err=$?
rm -f $C/menu
clear
if [ $err -ne 0 ]; then
	echo "Aborted"
	exit 0
fi

# fetch files, check checksums, retry fetch if needed
while read op pkg; do
	if [ "$op" = "remove" ]; then
		continue
	fi
	site=$(echo $pkg | cut -d: -f1)
	file=$(echo $pkg | cut -d: -f2-)
	fetch $site/$file
	if [ -r "$C/$site/CHECKSUMS.md5" ]; then
		csum=$(grep "$file\$" $C/$site/CHECKSUMS.md5 | cut -d' ' -f1)
		#echo "$csum  $C/$site/$file"
		echo "$csum  $C/$site/$file" | md5sum -c
		if [ $? -ne 0 ]; then
			fetch -f $site/$file
			echo "$csum  $C/$site/$file" | md5sum -c || exit 1
		fi
	fi
done <$C/selection

while read op pkg; do
	if [ "$op" = "remove" ]; then
		eval cmd=\"\$cmd_$op $pkg\"
	else
		site=$(echo $pkg | cut -d: -f1)
		file=$(echo $pkg | cut -d: -f2-)
		eval cmd=\"\$cmd_$op $C/$site/$file\"
	fi
	echo
	echo $cmd
	echo "$(date '+[%d %b %Y %H:%M:%S]') $cmd" >>$logfile
	echo
	$cmd || exit 1
done <$C/selection
rm -f $C/selection

# check for *.new files
echo
echo "Searching for *.new files: $new_dirs"
find $new_dirs -name \*.new

echo Done.

